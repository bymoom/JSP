package com.jsp.dao;

import java.sql.SQLException;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import com.jsp.dto.MemberVO;
import com.jsp.mybatis.OracleMyBatisSqlSessionFactoryBuilder;

public class MemberDAOImpl implements MemberDAO {

	private static MemberDAOImpl instance = new MemberDAOImpl();
	private MemberDAOImpl() {}
	public static MemberDAOImpl getInstance() {
		return instance;
	}
	
	//SqlSessionFactory
	private SqlSessionFactory sessionFactory;
	/*= OracleMyBatisSqlSessionFactoryBuilder.getSqlSessionFactory();*/
	
	public void setSessionFactory(SqlSessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}
	
	@Override
	public List<MemberVO> selectMemberList() throws SQLException {
		//메서드마다 독립적인 세션을 가진다
		SqlSession session = sessionFactory.openSession(); //openSession() : 기본값 false(셀렉트문이기때문에 오토커밋안함)
		List<MemberVO> memberList = session.selectList("Member-Mapper.selectMemberList", null); //null : 넘어가는 파라미터가 없다고 명시적으로 보여주기위해 작성
		session.close();
		return memberList;
	}

	@Override
	public int selectMemberListCount() throws SQLException {
		int count = 0;
		SqlSession session = sessionFactory.openSession();
		count = session.selectOne("Member-Mapper.selectMemberListCount", null);
		session.close();
		return count;
	}

	@Override
	public MemberVO selectMemberById(String id) throws SQLException {
		SqlSession session = sessionFactory.openSession();
		MemberVO member = session.selectOne("Member-Mapper.selectMemberById", id);
		session.close();
		return member;
	}

	@Override
	public void insertMember(MemberVO member) throws SQLException {
		SqlSession session = sessionFactory.openSession(true); //true를 주면 오토커밋됨(세션을 클로즈할때 커밋시킴)
		session.update("Member-Mapper.insertMember", member);
		session.close();
	}

	@Override
	public void updateMember(MemberVO member) throws SQLException {
		SqlSession session = sessionFactory.openSession(true); //true를 주면 오토커밋됨(세션을 클로즈할때 커밋시킴)
		session.update("Member-Mapper.updateMember", member);
		session.close();
	}

	@Override
	public void deleteMember(String id) throws SQLException {
		SqlSession session = sessionFactory.openSession(true); //true를 주면 오토커밋됨(세션을 클로즈할때 커밋시킴)
		session.update("Member-Mapper.deleteMember", id);
		session.close();
	}
	@Override
	public void disabledMember(String id) throws SQLException {
		SqlSession sesssion = sessionFactory.openSession(true);
		sesssion.update("Member-Mapper.disabledMember", id);
		sesssion.close();
	}
	@Override
	public void enabledMember(String id) throws SQLException {
		SqlSession sesssion = sessionFactory.openSession(true);
		sesssion.update("Member-Mapper.enabledMember", id);
		sesssion.close();
	}

}
